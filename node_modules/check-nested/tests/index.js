require('chai').should();
var checkNested = require('../');

describe('Check Nested', function () {
    it('should handle dot notation', function () {
        var testObj = {
            a: {
                b: {
                    c: 'value'
                }
            }
        };

        checkNested(testObj, 'a.b.c').should.equal('value');
    });

    it('should handle square bracket notation', function () {
        var testObj = {
            a: {
                b: {
                    c: 'value'
                }
            }
        };

        checkNested(testObj, 'a["b"]["c"]').should.equal('value');
    });

    it('should handle mixed notation', function () {
        var testObj = {
            a: {
                b: {
                    c: 'value'
                }
            }
        };

        checkNested(testObj, 'a.b["c"]').should.equal('value');
    });

    it('should support non-word properties', function () {
        var testObj = {
            a: {
                '$': {
                    c: 'value'
                }
            }
        };

        checkNested(testObj, 'a.$.c').should.equal('value');
        checkNested(testObj, 'a.$.banana').should.be.false;
    });

    it('should handle spaces', function () {
        var testObj = {
            a: {
                b: {
                    'c at': 'value'
                }
            }
        };

        checkNested(testObj, 'a.b["c at"]').should.equal('value');
    });

    it('should handle arrays', function () {
        var testObj = {
            a: {
                b: [{
                    c: 'value'
                }]
            }
        };

        checkNested(testObj, 'a.b[0]c').should.equal('value');
    });

    it('should handle nested arrays', function () {
        var testObj = {
            a: {
                b: [[{
                    c: 'value'
                }]]
            }
        };

        checkNested(testObj, 'a.b[0][0]c').should.equal('value');
    });

    it('should return a default if the property doesn\'t exist', function () {
        var testObj = {
            a: {
                b: {}
            }
        };

        checkNested(testObj, 'a.b.c', 'value').should.equal('value');
    });

    it('should return false if the property doesn\'t exist and no default is provided', function () {
        var testObj = {
            a: {
                b: {}
            }
        };

        checkNested(testObj, 'a.b.c').should.equal(false);
    });
});
